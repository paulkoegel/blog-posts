zähl-button:
http://jsbin.com/qeqigu/1/edit?html,js,output

zähl-button mit state:

toggler:
http://jsbin.com/fevema/1/edit?html,js,output


Heute ist es in aller Munde und Ideen aus React haben ihren Weg in [Ember](https://www.isemberfastyet.com) und viele [andere Bibliotheken](https://github.com/staltz/cycle) gefunden.
Einige Reaktionen fielen jedoch verhalten aus, was vor allem daran zu liegen scheint, dass React neue und unbekannte Wege beschreitet &ndash; zum Beispiel Integrieren von Templates in JavaScript-Dateien
Auf den ersten Blick störte viele Reacts Andersartigkeit.

Die ersten Reaktionen auf React waren verhalten oder [schnippisch](https://twitter.com/cowboy/status/339858717451362304). Zum einen, weil einiges an React auf den ersten Blick fremdartig ist. Es geht Probleme verschieden an als bisherige Lösungen. Daher ist es in doppelter Hinsicht _alien technology_ &ndash; einmal als fremdartige Technik, dann aber auch als Technik wie vom anderen Stern, die zu gut ist, um wahr zu sein.


React erlaubt mir größere Freiheiten, fordert dadurch aber auch umsichtigeres Arbeiten.
Frameworks nehmen mir oft lästige repetitive Verdrahtungsarbeiten ab, sind aber selten flexibel genug, um sie über längere Zeit in dynamischen Projekten einzusetzen. Und wenn es anfangs sinnvoll und sicherer erscheinen mag den mit dem Einsatz des Framework verbundenen Kontrollverlust zu begrüßen, so entpuppt meist er sich doch schnell als Ursache für einen schleichend wachsenden Kampf gegen das Framework. Gut gemeinte Puffer stellen sich leider allzu oft letztlich als Löffel heraus mit denen ich auf einmal Brot schneiden soll &ndash; natürlich kann ich mich damit nicht mehr schneiden, aber das Brot eben leider auch nicht...  
Gerade in der JavaScript-Landschaft ist die Halbwertszeit von Frameworks kurz (selbst die Tage von Angular 1 sind gezählt) und das Aufkommen neuer Lösungen nimmt kein Ende. Es scheint noch keine gute generische Lösung gefunden worden zu sein, wie man mit JavaScript Benutzeroberflächen im Browser schreibt. Warum sollte man sich also an ein Framework binden, das letztlich vor allem folgendes bleibt: "A product with the business logic removed, but all of the assumptions left in." ([_Devil’s Dictionary of Programming_](http://programmingisterrible.com/post/65781074112/devils-dictionary-of-programming))?
Frameworks behalten ihre Daseinsberechtigung, vor allem in Projekten an denen große verteilte Teams arbeiten, die bereits die Werte des Frameworks teilen. Wir sollten jedoch aufhören, nur noch nach Frameworks Ausschau zu halten und die Stärken eines Ökosystems von Bibliotheken nicht aus dem Blick verlieren. React hat schon heute bewiesen, dass es für jede Projekt- und Teamgröße eine gute Lösung ist.

